<ResourceDictionary
    x:Class="NaixxGithub.NINA.Fasterflats.FasterflatsTestCategory.PluginItemTemplate"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:NaixxGithub.NINA.Fasterflats.FasterflatsTestCategory"
    xmlns:mini="clr-namespace:NINA.View.Sequencer.MiniSequencer;assembly=NINA.Sequencer"
    xmlns:converters="clr-namespace:NaixxGithub.NINA.Fasterflats.Converters"
    xmlns:nina="clr-namespace:NINA.View.Sequencer;assembly=NINA.Sequencer">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <converters:TriStateLabelConverter x:Key="TriStateLabelConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <!-- Custom Three-State CheckBox Template -->
    <!-- Add this to your ResourceDictionary AFTER MergedDictionaries -->
    <Style x:Key="TriStateCheckBox" TargetType="CheckBox">
        <Setter Property="IsThreeState" Value="True" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <!-- FIXED: Horizontal grid layout with proper spacing -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <!-- Checkbox -->
                            <ColumnDefinition Width="8" />
                            <!-- Spacing -->
                            <ColumnDefinition Width="*" />
                            <!-- Text -->
                        </Grid.ColumnDefinitions>

                        <!-- CHECKBOX FRAME (in Column 0) -->
                        <Border x:Name="CheckBoxFrame"
                                Grid.Column="0"
                                Width="16" Height="16"
                                CornerRadius="2"
                                BorderThickness="1.5"
                                BorderBrush="{StaticResource BorderBrush}">
                            <Grid>
                                <Rectangle x:Name="Unchecked" Fill="Transparent" />
                                <!--<Path x:Name="CheckMark" 
                                  Data="M 3,8 L 6.5,11.5 L 13,5" 
                                  Stroke="{StaticResource SecondaryBackgroundBrush}" 
                                  StrokeThickness="2.2" 
                                  StrokeLineJoin="Round"
                                  Visibility="Collapsed"/>-->
                                <Path x:Name="CheckMark"
                                      Data="M 2,6 L 5,10 L 12,2"
                                      Stroke="{StaticResource ButtonBackgroundBrush}"
                                      StrokeThickness="2"
                                      StrokeLineJoin="Round"
                                      Visibility="Collapsed" />
                                <Rectangle x:Name="IndeterminateMark"
                                           Fill="{StaticResource ButtonBackgroundBrush}"
                                           Width="10" Height="10"
                                           Margin="2"
                                           Visibility="Collapsed" />
                            </Grid>
                        </Border>

                        <!-- STATE TEXT (in Column 2) -->
                        <TextBlock x:Name="StateText"
                                   Grid.Column="2"
                                   VerticalAlignment="Center"
                                   FontSize="12"
                                   Text="{Binding Path=IsChecked, 
                                            RelativeSource={RelativeSource TemplatedParent}, 
                                            Converter={StaticResource TriStateLabelConverter}}" />
                    </Grid>

                    <!-- VISUAL STATES -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="IndeterminateMark" Property="Visibility" Value="Collapsed" />
                            <!--<Setter TargetName="CheckBoxFrame" Property="BorderBrush" Value="#FFFF78D7"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            <!--<Setter TargetName="CheckBoxFrame" Property="BorderBrush" Value="#FFD83B01"/>-->
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBoxFrame" Property="BorderBrush" Value="#FF0000FF"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="CheckBoxFrame" Property="BorderBrush" Value="#FFC8C8C8"/>
                            <Setter TargetName="StateText" Property="Foreground" Value="#FF808080"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This geometrygroup defines a custom SVG to be used with the plugin instruction  -->
    <!-- <GeometryGroup x:Key="Plugin_Histogram_SVG"> -->
    <!--     <RectangleGeometry Rect="2,10,2,4" /> -->
    <!--     <RectangleGeometry Rect="6,6,2,8" /> -->
    <!--     <RectangleGeometry Rect="10,2,2,12" /> -->
    <!--     ~1~ Slash as path with thickness @1@ -->
    <!--     <PathGeometry Figures="M1,15 L13,1" /> -->
    <!-- </GeometryGroup> -->
    
    <GeometryGroup x:Key="Plugin_Histogram_SVG">
        <PathGeometry Figures="M 518.871,311.021C 518.871,305.265 514.204,300.604 508.448,300.604C 502.693,300.604 498.027,305.265 498.027,311.021C 498.027,345.495 469.985,373.536 435.511,373.536C 429.756,373.536 425.095,378.203 425.095,383.959C 425.095,389.713 429.756,394.38 435.511,394.38C 481.475,394.38 518.871,356.984 518.871,311.021 Z " />

        <PathGeometry Figures="M 490.303,87.8387C 490.303,82.36 488.484,77.792 484.828,74.1414L 424.527,13.8387C 420.875,10.1826 416.307,8.36002 410.823,8.36002C 405.333,8.36002 400.771,10.1826 397.12,13.8387L 5.484,405.475C 1.82267,409.131 0,413.704 0,419.183C 0,424.667 1.82267,429.229 5.484,432.885L 65.7813,493.183C 69.4373,496.839 74,498.667 79.484,498.667C 84.9693,498.667 89.536,496.849 93.1933,493.183L 484.828,101.547C 488.484,97.8853 490.303,93.3227 490.303,87.8387 Z M 354.172,177.073L 321.593,144.485L 410.817,55.256L 443.401,87.8387" />
        <PathGeometry Figures="M 69.7453,78.0947L 78.88,48.2507L 108.719,39.1147L 78.88,29.98L 69.7453,0.136017L 60.604,29.98L 30.76,39.1147L 60.604,48.2507" />
        <PathGeometry Figures="M 148.917,115.865L 167.193,175.552L 185.469,115.865L 245.156,97.5894L 185.469,79.3134L 167.193,19.62L 148.917,79.3134L 89.2293,97.5894" />
        <PathGeometry Figures="M 468.683,224.88L 459.552,195.041L 450.417,224.88L 420.573,234.016L 450.417,243.156L 459.552,272.995L 468.683,243.156L 498.531,234.016" />
        <PathGeometry Figures="M 264.645,78.0947L 273.781,48.2507L 303.625,39.1147L 273.781,29.98L 264.645,0.136017L 255.516,29.98L 225.667,39.1147L 255.516,48.2507" />

        <PathGeometry Figures="
        M 468.219,48.000
        C 401.333,-18.667 320.000,-42 256,-42
        C 192.000,-42 110.667,-18.667 43.781,48.000
        C -23.333,115.111 -50,196.444 -50,260
        C -50,323.556 -23.333,404.889 43.781,472.000
        C 110.667,539.111 192.000,566 256,566
        C 320.000,566 401.333,539.111 468.219,472.000
        C 535.333,404.889 562,323.556 562,260
        C 562,196.444 535.333,115.111 468.219,48.000
        Z
        M 445.807,445.807
        C 389.333,502.281 322.667,530 256,530
        C 189.333,530 122.667,502.281 66.1933,445.807
        C 9.7187,389.333 -18,322.667 -18,256
        C -18,189.333 9.7187,122.667 66.1933,66.1933
        C 122.667,9.7187 189.333,-18 256,-18
        C 322.667,-18 389.333,9.7187 445.807,66.1933
        C 502.281,122.667 530,189.333 530,256
        C 530,322.667 502.281,389.333 445.807,445.807
        Z" />
        <PathGeometry Figures="M 80.8853,98.964L 98.5467,81.2654L 431.115,413.036L 413.453,430.735" />

    </GeometryGroup>

    <!--  The definition of the plugin test instruction style  -->
    <!--  The DataType has to be defined as the instruction in context  -->
    <DataTemplate DataType="{x:Type local:FasterflatsInstruction}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Annotate Image:" />
                    <CheckBox
                        Style="{StaticResource TriStateCheckBox}"
                        MinWidth="120"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"

                        IsChecked="{Binding AnnotateImage}" />

                    <TextBlock VerticalAlignment="Center" Text="AutoStretch:" />
                    <CheckBox
                        Style="{StaticResource TriStateCheckBox}"
                        MinWidth="120"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"

                        IsChecked="{Binding AutoStretch}" />

                    <TextBlock VerticalAlignment="Center" Text="Detect Stars:" />
                    <CheckBox
                        Style="{StaticResource TriStateCheckBox}"
                        MinWidth="120"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"

                        IsChecked="{Binding DetectStars}" />


                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <!--  The definition of the test instruction plugin style in the mini format on the imaging tab  -->
    <!--  The Key has to be defined as the fully qualified instruction name and the "_Mini" postfix  -->
    <DataTemplate x:Key="NaixxGithub.NINA.Fasterflats.FasterflatsTestCategory.FasterflatsInstruction_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Text}"
                        TextAlignment="Right" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>


    <!--  The definition of the test condition plugin style in the mini format on the imaging tab  -->
    <!--  The Key has to be defined as the fully qualified instruction name and the "_Mini" postfix  -->
    <DataTemplate x:Key="NaixxGithub.NINA.Fasterflats.FasterflatsTestCategory.FasterflatsCondition_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <CheckBox
                        MinWidth="40"
                        VerticalAlignment="Center"
                        IsChecked="{Binding IsTruthy}" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>
</ResourceDictionary>